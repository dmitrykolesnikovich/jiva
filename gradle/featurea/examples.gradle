// https://featurea.myjetbrains.com/youtrack/issue/ENGINE-46

subprojects {

    ext.examples = { Closure closure ->
        boolean isExamplesProject = project.path.endsWith("-examples")
        if (isExamplesProject) {
            String mainPath = project.path.replace("-examples", "")

            // plugins
            apply plugin: "org.jetbrains.kotlin.multiplatform"
            apply plugin: "com.android.library"

            // targets
            kotlin {
                targets {
                    fromPreset(presets.android, "android")
                    fromPreset(presets.jvm, "desktop")
                    fromPreset(presets.iosArm64, "ios")
                    fromPreset(presets.js, "js")
                    js {
                        browser()
                    }
                }
            }

            // sourceSets
            kotlin {
                sourceSets {
                    commonMain {
                        kotlin.srcDirs = ["examples"]
                        kotlin.excludes = ["examples/assemble", "examples/res"]
                        resources.srcDirs = ["examples/res"]

                        dependencies {
                            api project(mainPath)
                        }
                    }
                }
            }

            // android
            android {
                sourceSets.main {
                    manifest.srcFile "$buildDir/manifest/AndroidManifest.xml"
                }
                compileOptions {
                    sourceCompatibility = JavaVersion.VERSION_1_8
                    targetCompatibility = JavaVersion.VERSION_1_8
                }
                compileSdkVersion 29
                defaultConfig {
                    minSdkVersion 19
                    versionCode 1
                    versionName "1.0"
                    multiDexEnabled true
                }
                dataBinding {
                    enabled = true
                }
                packagingOptions {
                    exclude "META-INF/*"
                }
                lintOptions {
                    tasks.lint.enabled = false
                }
            }
        } else {
            // runners
            closure.delegate = new ExamplesDelegate(project)
            closure()
        }
    }

}

class ExamplesDelegate {

    private final Project project

    ExamplesDelegate(Project project) {
        this.project = project
    }

    void mainCall(String task, Closure main) {
        project.tasks.register(task) {
            doLast {
                Project examplesProject = project.findProject("${project.path}-examples")
                println("[examples.gradle] mainCall by $examplesProject is '${main()}'")
            }
        }
    }

    void onLaunch(String task, Closure main) {
        project.tasks.register(task) {
            doLast {
                Project examplesProject = project.findProject("${project.path}-examples")
                println("[examples.gradle] onLaunch by $examplesProject is '${main()}'")
            }
        }
    }

}

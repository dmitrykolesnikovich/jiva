subprojects {    
    
    // gw artifactName:installShadowDist // IMPORTANT `mainCall` required
    project.ext.toolName = { String backend, String frontend = null ->
        if (project.path.endsWith("-draft")) return // quickfix todo improve
        apply plugin: "com.github.johnrengelman.shadow"

        shadowJar {
            archiveBaseName.set(backend)
            archiveClassifier.set("")
            archiveVersion.set("")
        }
        
        if (frontend == null) {
            launch4j "${backend}.exe", backend, "console"
        } else {
            launch4j "${frontend}.exe", backend, "gui"
        }        
    }
    
    // gw artifactName:createExe // `toolName` required
    project.ext.launch4j = { String exeFileName, String jarFileName, String type  ->        
        apply plugin: "edu.sc.seis.launch4j"
		
        launch4j {
            outfile = exeFileName
            jar = "${installShadowDist.destinationDir.path}/lib/${jarFileName}.jar"
            mainClassName = project.desktopLauncherMainClassName
            jdkPreference = 'jdkOnly'
            initialHeapSize = 128
            jreMinVersion = '1.7.0'
            jreMaxVersion = '1.8.9'
            maxHeapSize = 512
            headerType = type
            stayAlive = true
            bundledJre64Bit = true
            bundledJrePath = './bin/jre'
			
			if (new File("${projectDir}/assemble/icon.ico").exists()) {
				icon = "${projectDir}/assemble/icon.ico"
			}
        }
    }

    // gw artifactName:runShadow
    ext.testArgs = { String... relativePaths ->
        project.with {
            final String[] absolutePaths = new String[relativePaths.size()]
            for (int index = 0; index < relativePaths.size(); index++) {
                String relativePath = relativePaths[index]
                if (relativePath.startsWith(":")) {
                    final String[] tokens = relativePath.split(':')
                    if (tokens.size() != 3) error("Invalid paths: ${relativePaths.join()}")
                    final String projectName = tokens[1]
                    final String resourcePath = tokens[2]
                    final Project resourceProject = findProject(":$projectName")
                    final String resourcesRoot = "${resourceProject.projectDir}/res"
                    final String absoluteArg = "${resourcesRoot}/${resourcePath}"
                    absolutePaths[index] = absoluteArg
                } else {
                    absolutePaths[index] = relativePath
                }
            }
            runShadow {
                args absolutePaths
            }
        }        
    }

}
